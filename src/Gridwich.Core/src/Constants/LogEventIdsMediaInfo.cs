using Gridwich.Core.Helpers;
using Microsoft.Extensions.Logging;

namespace Gridwich.Core.Constants
{
    /// <summary>
    /// This partial class contains all the event ids for the MediaInfo project classes.
    /// </summary>
    public static partial class LogEventIds
    {
        // Information

        /// <summary>Information: MediaInfo finalized reading the file</summary>
        public static readonly EventId MediaInfoFileReadFinalized = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 0,
            "MediaInfo finalized reading the file.");

        /// <summary>Information: MediaInfo requested end of file</summary>
        public static readonly EventId MediaInfoRequestedEndOfFile = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 1,
            "MediaInfo requested end of file.");

        /// <summary>Information: MediaInfo requested read new range</summary>
        public static readonly EventId MediaInfoReadNewRangeRequested = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 2,
            "MediaInfo requested read new range.");

        /// <summary>Information: MediaInfo specific seek requested</summary>
        public static readonly EventId MediaInfoSeekRequested = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 3,
            "MediaInfo specific seek requested.");

        /// <summary>Information: MediaInfo mismatch between the desired offset and the content length</summary>
        public static readonly EventId MediaInfoMismatchInDesiredOffset = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 4,
            "MediaInfo mismatch between the desired offset and the content length.");

        /// <summary>Information: The MediaInfoLib DLL version is incompatible</summary>
        public static readonly EventId MediaInfoIncompatibleDllVersion = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 5,
            "The MediaInfoLib DLL version is incompatible.");

        /// <summary>Information: The MediaInfoLib DLL version</summary>
        public static readonly EventId MediaInfoCompatibleDllVersion = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Information, 6,
            "The MediaInfoLib DLL version.");

        // Error

        /// <summary>Error: MediaInfoLib failed to load</summary>
        public static readonly EventId MediaInfoLibFailedToLoad = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Error, 0,
            "MediaInfoLib failed to load.");

        /// <summary>Error: The length of the blob is invalid</summary>
        public static readonly EventId InvalidBlobContentLength = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Error, 1,
            "The length of the blob is invalid.");

        /// <summary>Error: The content obtained in the HTTP range download operation is invalid</summary>
        public static readonly EventId MediaInfoInvalidContent = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Error, 2,
            "The content obtained in the HTTP range download operation is invalid.");

        /// <summary>Error: The report generated by MediaInfoLib was null or empty string</summary>
        public static readonly EventId InvalidMediaInfoLibReport = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Error, 3,
            "The report generated by MediaInfoLib was null or empty string.");

        // Critical

        /// <summary>Critical: MediaInfoLib OpenBufferContinueGoToGet threw an unexpected exception</summary>
        public static readonly EventId MediaInfoLibOpenBufferContinueGoToGetFailed = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Critical, 0,
            "MediaInfoLib OpenBufferContinueGoToGet operation threw an unexpected exception.");

        /// <summary>Critical: MediaInfoLib OpenBufferInit operation threw an unexpected exception</summary>
        public static readonly EventId MediaInfoLibOpenBufferInitFailed = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Critical, 1,
            "MediaInfoLib OpenBufferInit operation threw an unexpected exception.");

        /// <summary>Critical: MediaInfoLib OpenBufferContinue operation threw an unexpected exception</summary>
        public static readonly EventId MediaInfoLibOpenBufferContinueFailed = EventHelpers.CreateEventId(
            LogEventIdSubsystem.MediaInfo, LogEventIdLevel.Critical, 2,
            "MediaInfoLib OpenBufferContinue operation threw an unexpected exception.");
    }
}